{"version":3,"file":"assets/js/lazy-loading.js","mappings":"mBAAA,MAAMA,EACJC,WAAAA,CAAYC,EAAS,CAAC,GACpBC,KAAKD,OAAS,CACZE,WAAY,GACZC,aAAc,GACdC,YAAa,CACXC,MAAO,UACPC,cAAe,GAEjBC,QAAS,CACPC,GAAI,IACJC,GAAI,IACJC,GAAI,KACJC,GAAI,KACJ,MAAO,MAETC,OAAQZ,EAAOY,QAAU,MACtBZ,GAGLC,KAAKY,gBAAkB,IAAIC,QAC3Bb,KAAKc,gBAAkB,IAAID,QAC3Bb,KAAKe,MACP,CAEAA,IAAAA,GAEEf,KAAKgB,qBAGuB,aAAxBC,SAASC,WACXlB,KAAKmB,mBAELC,OAAOC,iBAAiB,QAAQ,IAAMrB,KAAKmB,oBAE/C,CAGAH,kBAAAA,GAEsBhB,KAAKsB,sBAGbC,SAAQC,IACM,QAApBA,EAAQC,QACVzB,KAAK0B,gBAAgBF,GACQ,OAApBA,EAAQC,SAAwC,OAApBD,EAAQC,QAC7CzB,KAAK2B,gBAAgBH,GACZA,EAAQI,aAAa,oBAC9B5B,KAAK6B,qBAAqBL,EAC5B,GAEJ,CAGAF,mBAAAA,GACE,MAAMQ,EAAW,GAGXC,EAAcd,SAASe,cAAc,UACvCD,GAAaD,EAASG,KAAKF,GAG/B,MAAMG,EAAYjB,SAASe,cAAc,sCACrCE,GAAWJ,EAASG,KAAKC,GAG7B,MAAMC,EAAkBC,MAAMC,KAAKpB,SAASqB,iBAAiB,QAAQC,QAAOC,IAC1E,MAAMC,EAAOD,EAAIE,wBACjB,OAAOD,EAAKE,IAAMvB,OAAOwB,aAAeH,EAAKI,MAAQ,KAAOJ,EAAKK,OAAS,GAAG,IAI/E,OAFAhB,EAASG,QAAQE,GAEVL,CACT,CAGA,qBAAMJ,CAAgBc,GACpB,GAAIxC,KAAKY,gBAAgBmC,IAAIP,GAAM,OAEnC,MAAMQ,EAAcR,EAAIS,aAAa,QAAUT,EAAIS,aAAa,YAChE,GAAKD,EAEL,IAEE,MAAME,EAAcjC,SAASkC,cAAc,QAC3CD,EAAYE,IAAM,UAClBF,EAAYG,GAAK,QACjBH,EAAYI,KAAON,EACnB/B,SAASsC,KAAKC,YAAYN,GAE1B,MAAMO,QAAmBzD,KAAK0D,aAAaV,GACrCW,EAAe3D,KAAK4D,gBAAgBZ,EAAa,CACrDa,QAAS,GACThB,MAAOY,EAAWZ,QAIpBL,EAAIsB,IAAMH,EACVnB,EAAIuB,aAAa,QAASN,EAAWZ,OACrCL,EAAIuB,aAAa,SAAUN,EAAWX,QACtCN,EAAIwB,MAAMC,YAAc,GAAGR,EAAWZ,WAAWY,EAAWX,SAG5DN,EAAIuB,aAAa,gBAAiB,QAElC/D,KAAKY,gBAAgBsD,IAAI1B,EAE3B,CAAE,MAAO2B,GACPC,QAAQC,KAAK,uCAAwCF,EACvD,CACF,CAGAxC,eAAAA,CAAgB2C,GAEdA,EAAQN,MAAMO,QAAU,QAGxB,MAAMP,EAAQ/C,SAASkC,cAAc,SACrCa,EAAMQ,YAAc,WAChBF,EAAQ7C,QAAQgD,yEAIpBxD,SAASsC,KAAKC,YAAYQ,EAC5B,CAGA,0BAAMnC,CAAqBL,GACzB,GAAIxB,KAAKY,gBAAgBmC,IAAIvB,GAAU,OAEvC,MAAMkD,EAAQlD,EAAQyB,aAAa,oBAAsBjD,KAAK2E,cAAcnD,GAC5E,GAAKkD,EAEL,IAEE,MAAMxB,EAAcjC,SAASkC,cAAc,QAC3CD,EAAYE,IAAM,UAClBF,EAAYG,GAAK,QACjBH,EAAYI,KAAOoB,EACnBzD,SAASsC,KAAKC,YAAYN,GAG1B,MAAM0B,EAAe5E,KAAK4D,gBAAgBc,EAAO,CAC/Cb,QAAS,KAGXrC,EAAQwC,MAAMa,gBAAkB,QAAQD,MACxC5E,KAAKY,gBAAgBsD,IAAI1C,EAE3B,CAAE,MAAO2C,GACPC,QAAQC,KAAK,4CAA6CF,EAC5D,CACF,CAGAhD,gBAAAA,GACEnB,KAAK8E,gBACL9E,KAAK+E,gBACL/E,KAAKgF,gBACLhF,KAAKiF,UACP,EAQuB,IAAIpF,EAAsB,CACjDI,WAAY,IACZE,YAAa,CACXC,MAAO,UACPC,cAAe,I","sources":["webpack://frontis/./src/frontend/lazy-loading.js"],"sourcesContent":["class FrontisImageOptimizer {\r\n  constructor(config = {}) {\r\n    this.config = {\r\n      lazyOffset: 50,\r\n      imageQuality: 85,\r\n      placeholder: {\r\n        color: '#F1F1F1',\r\n        blurHashLevel: 4\r\n      },\r\n      screens: {\r\n        sm: 640,\r\n        md: 768,\r\n        lg: 1024,\r\n        xl: 1280,\r\n        '2xl': 1536\r\n      },\r\n      cdnUrl: config.cdnUrl || '',\r\n      ...config\r\n    };\r\n\r\n    this.processedImages = new WeakSet();\r\n    this.processedVideos = new WeakSet();\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    // Priority loading for LCP elements\r\n    this.processLCPElements();\r\n    \r\n    // Then handle other elements\r\n    if (document.readyState === 'complete') {\r\n      this.setupLazyLoading();\r\n    } else {\r\n      window.addEventListener('load', () => this.setupLazyLoading());\r\n    }\r\n  }\r\n\r\n  // New method to handle LCP elements\r\n  processLCPElements() {\r\n    // Get potential LCP elements\r\n    const lcpElements = this.identifyLCPElements();\r\n    \r\n    // Process them immediately with high priority\r\n    lcpElements.forEach(element => {\r\n      if (element.tagName === 'IMG') {\r\n        this.processLCPImage(element);\r\n      } else if (element.tagName === 'H1' || element.tagName === 'H2') {\r\n        this.optimizeHeading(element);\r\n      } else if (element.hasAttribute('data-frontis-bg')) {\r\n        this.processLCPBackground(element);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Identify potential LCP elements\r\n  identifyLCPElements() {\r\n    const elements = [];\r\n    \r\n    // First meaningful heading\r\n    const mainHeading = document.querySelector('h1, h2');\r\n    if (mainHeading) elements.push(mainHeading);\r\n\r\n    // Hero image or first large image\r\n    const heroImage = document.querySelector('.hero img, .banner img, header img');\r\n    if (heroImage) elements.push(heroImage);\r\n\r\n    // Large above-the-fold images\r\n    const aboveFoldImages = Array.from(document.querySelectorAll('img')).filter(img => {\r\n      const rect = img.getBoundingClientRect();\r\n      return rect.top < window.innerHeight && rect.width > 200 && rect.height > 200;\r\n    });\r\n    elements.push(...aboveFoldImages);\r\n\r\n    return elements;\r\n  }\r\n\r\n  // Process LCP images with high priority\r\n  async processLCPImage(img) {\r\n    if (this.processedImages.has(img)) return;\r\n\r\n    const originalSrc = img.getAttribute('src') || img.getAttribute('data-src');\r\n    if (!originalSrc) return;\r\n\r\n    try {\r\n      // Preload the image\r\n      const preloadLink = document.createElement('link');\r\n      preloadLink.rel = 'preload';\r\n      preloadLink.as = 'image';\r\n      preloadLink.href = originalSrc;\r\n      document.head.appendChild(preloadLink);\r\n\r\n      const dimensions = await this.getImageSize(originalSrc);\r\n      const optimizedSrc = this.getOptimizedUrl(originalSrc, {\r\n        quality: 90, // Higher quality for LCP images\r\n        width: dimensions.width\r\n      });\r\n\r\n      // Load immediately without placeholder\r\n      img.src = optimizedSrc;\r\n      img.setAttribute('width', dimensions.width);\r\n      img.setAttribute('height', dimensions.height);\r\n      img.style.aspectRatio = `${dimensions.width} / ${dimensions.height}`;\r\n      \r\n      // Add fetchpriority=\"high\" for browsers that support it\r\n      img.setAttribute('fetchpriority', 'high');\r\n      \r\n      this.processedImages.add(img);\r\n\r\n    } catch (error) {\r\n      console.warn('Frontis: Error processing LCP image:', error);\r\n    }\r\n  }\r\n\r\n  // Optimize headings that might be LCP\r\n  optimizeHeading(heading) {\r\n    // Ensure text is visible immediately\r\n    heading.style.display = 'block';\r\n    \r\n    // Add font-display: swap if using custom fonts\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      ${heading.tagName.toLowerCase()} {\r\n        font-display: swap !important;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  }\r\n\r\n  // Process LCP background images\r\n  async processLCPBackground(element) {\r\n    if (this.processedImages.has(element)) return;\r\n\r\n    const bgUrl = element.getAttribute('data-frontis-bg') || this.getBgImageUrl(element);\r\n    if (!bgUrl) return;\r\n\r\n    try {\r\n      // Preload the background image\r\n      const preloadLink = document.createElement('link');\r\n      preloadLink.rel = 'preload';\r\n      preloadLink.as = 'image';\r\n      preloadLink.href = bgUrl;\r\n      document.head.appendChild(preloadLink);\r\n\r\n      // Apply optimized background immediately\r\n      const optimizedUrl = this.getOptimizedUrl(bgUrl, {\r\n        quality: 90 // Higher quality for LCP elements\r\n      });\r\n      \r\n      element.style.backgroundImage = `url(\"${optimizedUrl}\")`;\r\n      this.processedImages.add(element);\r\n\r\n    } catch (error) {\r\n      console.warn('Frontis: Error processing LCP background:', error);\r\n    }\r\n  }\r\n\r\n  // Rest of the methods remain the same...\r\n  setupLazyLoading() {\r\n    this.setupObserver();\r\n    this.processImages();\r\n    this.processVideos();\r\n    this.watchDOM();\r\n  }\r\n\r\n  // ... (include all other methods from previous implementation)\r\n}\r\n\r\n// Initialize with LCP optimization\r\nexport default FrontisImageOptimizer;\r\n\r\nconst frontisOptimizer = new FrontisImageOptimizer({\r\n  lazyOffset: 100,\r\n  placeholder: {\r\n    color: '#E2E2E2',\r\n    blurHashLevel: 4\r\n  }\r\n});"],"names":["FrontisImageOptimizer","constructor","config","this","lazyOffset","imageQuality","placeholder","color","blurHashLevel","screens","sm","md","lg","xl","cdnUrl","processedImages","WeakSet","processedVideos","init","processLCPElements","document","readyState","setupLazyLoading","window","addEventListener","identifyLCPElements","forEach","element","tagName","processLCPImage","optimizeHeading","hasAttribute","processLCPBackground","elements","mainHeading","querySelector","push","heroImage","aboveFoldImages","Array","from","querySelectorAll","filter","img","rect","getBoundingClientRect","top","innerHeight","width","height","has","originalSrc","getAttribute","preloadLink","createElement","rel","as","href","head","appendChild","dimensions","getImageSize","optimizedSrc","getOptimizedUrl","quality","src","setAttribute","style","aspectRatio","add","error","console","warn","heading","display","textContent","toLowerCase","bgUrl","getBgImageUrl","optimizedUrl","backgroundImage","setupObserver","processImages","processVideos","watchDOM"],"sourceRoot":""}